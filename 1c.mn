// limpa variável
operation clear(A){
 1: if zero A then goto 0 else goto 2
 2: do dec A goto 1
}

// A:=A+B (soma destrutiva)
operation soma(A,B){
  1: if zero B then goto 0 else goto 2
  2: do dec B goto 3
  3: do inc A goto 1
}

// A:=A+B (soma não-destrutiva)
operation soma(A,B,C){
	1: if zero B then goto 5 else goto 2
	2: do dec B goto 3
	3: do inc A goto 4
	4: do inc C goto 1
	5: if zero C then goto 0 else goto 6
	6: do dec C goto 7
	7: do inc B goto 5
  }

// A:=B (atribuição destrutiva)
operation load(A,B){
	1: do clear(A) goto 2
	2: do soma(A,B) goto 0
  }
  
  // A:=B usando C (atribuição não-destrutiva)
  operation load(A,B,C){
	1: do clear(A) goto 2
	2: do soma(A,B,C) goto 0
  }

// A:=A-B (flag subtrair destrutiva), A == B = 0, A > B = 2, A < B = 1
operation flag_subtrair(A,B){
	1: if zero A then goto 2 else goto 3
	2: if zero B then goto 0 else goto fim1
	3: if zero B then goto fim2 else goto 4
	4: do dec A goto 5
	5: do dec B goto 1

	fim1: do clear(A) goto fim1_1
	fim1_1: do add A 1 goto 0 

	fim2: do clear(A) goto fim2_1
	fim2_1: do add A 2 goto 0 
  }

  // flag(E):=A-B (flag subtrair não-destrutiva), A == B = 0, A > B = 2, A < B = 1
operation flag_subtrair(A,B,C,D,E){
	base: do clear(E) goto 1
	1: do load(C,A,D) goto 2
	2: do load(D,B,E) goto 3
	3: if zero A then goto 4 else goto 5
	4: if zero B then goto 0 else goto fim1
	5: if zero B then goto fim2 else goto 6
	6: do dec A goto 7
	7: do dec B goto 3

	fim1: do load(A,C) goto fim1_1
	fim1_1: do load(B,D) goto fim1_2
	fim1_2: do clear(E) goto fim1_3
	fim1_3: do add E 1 goto 0 

	fim2: do load(A,C) goto fim2_1
	fim2_1: do load(B,D) goto fim2_2
	fim2_2: do clear(E) goto fim2_3
	fim2_3: do add E 2 goto 0 
  }

// A:=A*B usando C, D (destrutivo)
operation multiplicar(A,B,C,D){
    1: if zero A then goto 8 else goto 2
    2: do dec A goto 3
    3: if zero B then goto 7 else goto 4
    4: do dec B goto 5
    5: do inc C goto 6
    6: do inc D goto 3
    7: do load(B,D) goto 1
    8: do load(A,C) goto 0
}

// C:=A*B usando D,E,F,G (Não destrutivo)
operation multiplicar(A,B,C,D,E,F,G){
	base: do clear(C) goto 1
    1: do load(E,A,G) goto 2
	2: do load(F,B,G) goto 3
	3: if zero A then goto fim else goto 4
	4: do dec A goto 5
	5: if zero B then goto 9 else goto 6
	6: do dec B goto 7
	7: do inc C goto 8
	8: do inc D goto 5
	9: do load(B,D) goto 3
	fim: do load(A,E) goto fim1
	fim1: do load(B,F) goto 0
}

// testa se o numero é par ou não usando B e C 
test eh_Par(A,B,C){
    1: do load(C,A,B) goto 2
	2: if zero C then goto true else goto 3
	3: do dec C goto 4
	4: if zero C then goto false else goto 5
	5: do dec C goto 2
}

main {
	// Testa se X é zero
	1: if zero X then goto 0 else goto 2
	// Carrega o X em Z usando Y
	2: do load(Z,X,Y) goto 3
	// Incrementa B1 e C1, que representam a raiz de X
	3: do inc B1 goto 4
	4: do inc C1 goto 5
	// Carrega em W a possível raiz de X
	5: do load(W,B1,Y) goto 6
	// Multiplica para encontrar X, e salva o valor em D1
	6: do multiplicar(B1,C1,D1,B0,C0,D0,E0) goto 7
	// Verifica se o programa deve continuar ou parar 
	7: do flag_subtrair(Z,D1,B0,C0,R) goto 8
	8: if cmp R 0 then goto fim1 else goto 9
	9: if cmp R 2 then goto 3 else goto fim2
	// Retornos esperados da função
	fim1: if eh_Par(W,B0,C0) then goto fim1_1 else goto fim1_2
	fim1_1: do add Y 2 goto 0
	fim1_2: do add Y 1 goto 0
	fim2: do add Y 0 goto 0
}